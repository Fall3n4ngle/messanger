// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  clerkId       String         @unique
  name          String
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  conversations Conversation[]
  member        Member[]
}

model Conversation {
  id            String    @id @default(uuid())
  name          String
  image         String?
  isGroup       Boolean   @default(false)
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?   @unique
  createdAt     DateTime  @unique @default(now())
  updatedAt     DateTime  @updatedAt()
  messages      Message[] @relation("Messages")
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  members       Member[]
}

enum MemberRole {
  ADMIN
  VIEW
  EDIT
}

model Member {
  id             String        @id @default(uuid())
  role           MemberRole    @default(VIEW)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  messages       Message[]

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String        @id @default(uuid())
  content        String?
  file           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  conversationId String
  conversation   Conversation  @relation("Messages", fields: [conversationId], references: [id], onDelete: Cascade)
  lastMessageOf  Conversation? @relation("LastMessage")
  member         Member        @relation(fields: [memberId], references: [id])
  memberId       String
}
